@model JokerKS.WLFU.Models.CreateProductModel
@{
    ViewBag.Title = "Create Product";
}
<link href="~/Content/Styles.css" rel="stylesheet" />
<link href="~/Content/bootstrap-tagsinput.css" rel="stylesheet" />
<link href="~/Content/bootstrap-tagsinput-typeahead.css" rel="stylesheet" />

<style>
    .dropzone {
        height: 180px;
        border: 3px dashed #ccc;
        font-size: 20px;
        color: #ccc;
        text-align: center;
        border-radius: 5px;
    }

    .dropzone .dragover {
        border-color: #000;
        color: #000;
    }

    .dropzone:before {
        content: "";
        display: inline-block;
        vertical-align: middle;
        height: 100%;
    }

    .v-center{
        display: inline-block;
        vertical-align: middle;
    }

    .bootstrap-tagsinput{
        min-width:350px !important;
    }
</style>

<h2>Create Product</h2>
<hr />

<form id="ProductForm" class="form-horizontal" enctype="multipart/form-data" method="post">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.RequestId)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", autocomplete = "off"} })
        </div>
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-addon">PLN</span>
                @Html.EditorFor(model => model.Price, "", new { htmlAttributes = new { @type = "number", @min = "0", @Value = "", @step = "0.5", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @type = "number", @min = "0", @Value = "1", @class = "form-control"} })
            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Categories, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.Categories, "Value", "Text"), "  --> Select Category <--  ", new { @class = "form-control" })
            @Html.ValidationMessageFor(Model => Model.CategoryId)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", autocomplete = "off"} })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => Model.TagsString, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input class="form-control tags-input" type="text" autocomplete="off" name="TagsString" value="@Model.TagsString" data-role="tagsinput" />
            <div class="clear"></div>
            @Html.ValidationMessageFor(model => Model.TagsString, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label for="Images" class="control-label col-md-2">Images:</label>
        <div  class="col-md-10">
            <div id="dropzone" class="dropzone" name="dropzone">
                <div class="v-center">
                    <span>Drop files here to upload</span><br>
                    <span>or</span><br>
                    <input type="button" class="btn btn-info" value="Choose image/images" onclick="document.getElementById('selectedFiles').click();" />
                    <input type="file" id="selectedFiles" name="Images" style="display: none;" multiple accept="image/png,image/gif,image/jpeg" />
                </div>
            </div>
            @Html.ValidationMessage("selectedFiles", new { @class = "text-danger" })
        </div>
    </div>

    <div id="image-preview" class="form-group">
        
    </div>
    <div id="image-info" style="display:none">

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10" style="text-align:center">
            <input type="button" value="Create" class="btn btn-default" onclick="SendProduct()" />
        </div>
    </div>
</form>

<script src="~/Scripts/tinymce/tinymce.min.js"></script>
<script>
    $(document).ready(function(){
        tinyMCE.init({
            mode: "textareas",
            height: 300,
            theme: "modern",
            menubar: false,

            plugins: [
                'lists textcolor',
            ],
            setup: function (editor) {
                editor.on('change', function () {
                    tinyMCE.triggerSave();
                    var content = tinyMCE.activeEditor.getContent();
                    $("#" + editor.id).valid();
                });
            },
            toolbar1: 'undo redo | insert | styleselect | bold italic underline | forecolor backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent',
        });
    });
</script>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script>
    var filesToUpload = [];

    (function () {
        var dropzone = document.getElementById('dropzone');
        dropzone.ondrop = function (e) {
            e.preventDefault();
            this.className = 'dropzone';

            FilesChosen(e.dataTransfer.files);
        };

        dropzone.ondragover = function () {
            if (this.className == 'dropzone')
                this.className += ' dragover';
            return false;
        };

        dropzone.ondragleave = function () {
            this.className = 'dropzone';
            return false;
        };
    }());

    $("#selectedFiles").change(function () {
        FilesChosen($("#selectedFiles")[0].files);
        $("#selectedFiles").val('');
    });

    function FilesChosen(files) {
        if (window.FormData && window.FileReader && window.FileList) {
            if (files.length > 0) {
                for (var i = 0; i < files.length; i++) {

                    supportedFormats = ['jpeg', 'gif', 'png'];
                    var correctFormat = false;
                    supportedFormats.forEach(function (extension) {
                        if (files[i].type.match('image/' + extension)) {
                            correctFormat = true;
                        }
                    })

                    if (correctFormat) {
                        filesToUpload.push(files[i]);

                        var reader = new FileReader();
                        reader.onload = function (file) {
                            var isMainRadioBtn = "<div class='radio'><label><input name='IsMain' type='radio'";
                            var imgCount = $('input[type=button][id="deleteImg"]');
                            if (imgCount.length == 0)
                                isMainRadioBtn += " checked";
                            isMainRadioBtn += "/>Is Main Image</label></div>";
                            document.getElementById('image-preview')
                                .insertAdjacentHTML('beforeend', '<div><div class="col-md-2" style="text-align: right;">' + isMainRadioBtn + '<input id="deleteImg" type="button" class="btn btn-danger" value="Delete Image" onclick="DeleteImg(this)"/></div><div class="col-md-10"><div class="img-wrap form-group"><div class="col-md-4"><img src="' + file.target.result + '" class="img-thumbnail" alt="Image Not Found"/></div><div class="col-md-6"><div id="image-title"><label>Image Title</label><input class="form-control text-box single-line"/></div></div></div></div></div>');
                        };
                        reader.readAsDataURL(files[i]);
                    }

                    RevalidateDropzone();
                }
            }
        } else alert("This browser doesn't support HTML5 file uploads!");
    }

    var DeleteImg = function (e) {
        var delInputs = $('input[type=button][id="deleteImg"]');
        if(delInputs.length == filesToUpload.length)
            for (var i = 0; i < delInputs.length; i++) {
                if (delInputs[i] == e){
                    filesToUpload.splice(i, 1);
                    $(e).parent().parent().remove();
                    if(filesToUpload.length == 0)
                        RevalidateDropzone();
                    return;
                }
            }
    }

    //dropzone revalidation
    function RevalidateDropzone(){
        var validator = $("#ProductForm").validate();
        validator.element("#selectedFiles");
    }

    $().ready(function () {
        $("#ProductForm").validate({
            ignore: "",
            errorClass: "text-danger",
            rules: {
                Name: {
                    required: true,
                    minlength: 6,
                    maxlength: 50
                },
                Description: {
                    required: true,
                    minlength: 50
                },
                Images: {
                    accept: false,
                    greaterThanZero: true
                },
                CategoryId: {
                    required: true
                }
            }
        });

        $.validator.addMethod("greaterThanZero", function (value, element) {
            return filesToUpload.length > 0 ? true : false;
        }, 'At least one picture is required');
    });


    var SendProduct = function () {
        var form = $("#ProductForm");

        if (form.valid()) {

            var data = new FormData();
            for (var i = 0; i < filesToUpload.length; i++) {
                data.append('images', filesToUpload[i]);
            }

            $.ajax({
                url: "@Url.Action("SaveImages")",
                type:"POST",
                processData: false,
                contentType: false,
                data: data,
                success: function (response) {
                    if (response){
                        $("#RequestId").val(response.requestId);

                        var formdata = new FormData(form);
                        
                        $("#image-info").empty();

                        $.each(response.pathes, function(key, value){
                            $("#image-info").append("<input name='filePathes' type='hidden' value='"+value+"'/>");
                        });

                        var titles = $('.img-wrap #image-title :input');
                        for (var i = 0; i < filesToUpload.length; i++) {
                            $("#image-info").append("<input name='titles' type='hidden' value='"+titles[i].value+"'/>");
                        }

                        var isMain = $('input[name=IsMain]');
                        for (var i = 0; i < isMain.length; i++) {
                            if (isMain[i].checked) {
                                $("#image-info").append("<input name='MainImageIndex' type='hidden' value='"+i+"'/>");
                                break;
                            }
                        }

                        form.submit();
                    }
                },
                error: function (er) {
                    alert(er);
                }

            });

            @*$.ajax({
                url: "@Url.Action("Create")",
                type: "POST",
                contentType: false,
                processData: false,
                data: formdata,
                dataType: 'json',
                encode: true,
                async: false,
                beforeSend: function () {
                    if (!$("#ProductForm").valid) return;
                },
                success: function (result) {
                    if (!$("#ProductForm").valid) return;
                    window.location.href = result.newUrl;
                },
                error: function (err) {
                    alert(err.statusText);
                }
            });*@
        }
    };
</script>

<script src="~/Scripts/bootstrap-tagsinput.min.js"></script>
<script src="~/Scripts/bootstrap3-typeahead.min.js"></script>
<script>
    //Tags input initialization
    $('.tags-input').tagsinput({
        maxChars: 25,
        typeahead: {
            source: @Html.Raw(Json.Encode(Model.AllTagsString)),
            afterSelect: function () {
                this.$element[0].value = '';
            }
        }
    })

    //Add tag on focusout
    $('.tags-input').focusout(function() {
        $('.tags-input').add($('.tags-input').input.val());
        $('.tags-input').input.typeahead('val', '');
    });
</script>

<script src="~/Scripts/bootstrapValidator.min.js"></script>
<script>
    /*
    $(document).ready(function () {
        $('#ProductForm')
            .find('[name="TagsString"]')
                .change(function (e) {
                    $('#ProductForm').bootstrapValidator('revalidateField', 'TagsString');
                })
                .end()
            .bootstrapValidator({
                framework: 'bootstrap',
                excluded: ':disabled',
                icon: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    TagsString: {
                        validators: {
                            notEmpty: {
                                message: 'Please enter at least one tag'
                            }
                        }
                    }
                }
            });
    });
    */
</script>