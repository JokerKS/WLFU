@model WLFU.Models.CreateProductModel
@{
    ViewBag.Title = "Add Product";
}

<link href="~/Content/bootstrap-tagsinput.css" rel="stylesheet" />
<link href="~/Content/bootstrap-tagsinput-typeahead.css" rel="stylesheet" />
<style>
    .bootstrap-tagsinput{
        min-width: 250px;
    }
</style>

<div class="col-md-10 col-md-offset-2">
    <h2>Add Product</h2>
</div>

@using (Html.BeginForm("Save", "Product", FormMethod.Post, new { id = "ProductForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", required = true } })
                @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group" style="max-width:250px">
                    <span class="input-group-addon">PLN</span>
                    @Html.EditorFor(model => model.Product.Price, "", new { htmlAttributes = new { @type = "number", @min = "0", @Value = "1", @step = "0.5", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Description, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Product.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Amount, new { htmlAttributes = new { @type = "number", @min = "0", @Value = "1", @class = "form-control", style = "max-width:250px" } })
                @Html.ValidationMessageFor(model => model.Product.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model.Product.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input class="form-control tags-input" type="text" autocomplete="off" name="TagsString" value="@Model.TagsString" data-role="tagsinput"/>
                <div class="clear"></div>
                @Html.ValidationMessageFor(model => Model.TagsString, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model.Product.Images, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input class="form-control images" type="file" onchange="filePreview()" accept="image/png,image/gif,image/jpeg" multiple/>
                @Html.ValidationMessageFor(model => Model.Product.Images, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 col-md-offset-2 images-preview">

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    var filesToUpload = [];

    function filePreview() {
        if (window.FormData && window.FileReader && window.FileList) {
            var previewContainer = $('.images-preview');
            var files = $(".images")[0].files;
            if (files.length > 0) {
                for (var i = 0; i < files.length; i++)
                {
                    filesToUpload.push(files[i]);

                    var reader = new FileReader();

                    reader.onloadend = function (file) {
                        previewContainer.append('<div class="img-wrap"><img src="#" class="img-thumbnail" alt="Image Not Found"/></div>');
                        var lastImgContainer = $('.images-preview .img-wrap:last-child')
                            .children('img').attr("src", file.target.result);
                    }

                    reader.readAsDataURL(files[i]);
                }
            }
        } else {
            alert("This browser doesn't support HTML5 file uploads!");
        }
    }

    $("#ProductForm").submit(function(event) {

        var formdata = new FormData(document.getElementById("ProductForm"));

        for (var i = 0; i < filesToUpload.length; i++) {
            formdata.append('image'+i, filesToUpload[i]);
        }

        $("#ProductForm").validate();
        if($("#ProductForm").valid())
        {
            $.ajax({
                url: '/Product/Save',
                type: "POST",
                contentType: false,
                processData: false,
                data: formdata,
                dataType: 'json',
                encode: true,
                async: false,
                beforeSend: function(){
                    $("#ProductForm").validate();
                    if(!$("#ProductForm").valid) return;
                },
                success: function (result) {
                    alert(result);
                },
                error: function (err) {
                    alert(err.statusText);
                }
            });
        }
    });

    function ajaxValidate() {
        return $('form').validate().form();
    }
</script>

<script src="~/Scripts/bootstrap-tagsinput.min.js"></script>
<script src="~/Scripts/bootstrap3-typeahead.min.js"></script>
<script>
    //Tags input initialization
    $('.tags-input').tagsinput({
        maxChars: 25,
        typeahead: {
            source: @Html.Raw(Json.Encode(Model.AllTagsString)),
            afterSelect: function () {
                this.$element[0].value = '';
            }
        }
    })

    //Add tag on focusout
    $('.tags-input').focusout(function() {
        $('.tags-input').add($('.tags-input').input.val());
        $('.tags-input').input.typeahead('val', '');
    });
</script>

<script src="~/Scripts/bootstrapValidator.min.js"></script>
<script>
    $(document).ready(function () {
        $('#ProductForm')
            .find('[name="TagsString"]')
                .change(function (e) {
                    $('#ProductForm').bootstrapValidator('revalidateField', 'TagsString');
                })
                .end()
            .bootstrapValidator({
                framework: 'bootstrap',
                excluded: ':disabled',
                icon: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    TagsString: {
                        validators: {
                            notEmpty: {
                                message: 'Please enter at least one tag'
                            }
                        }
                    }
                }
            });
    });
</script>

<script src="~/Scripts/tinymce/tinymce.min.js"></script>
<script>
    $(function () {
        tinyMCE.init({
            mode: "textareas",
            height: 300,
            theme: "modern",
            menubar: false,

            plugins: [
                'lists textcolor',
            ],

            setup: function (editor) {
                editor.on('change', function () {
                    tinyMCE.triggerSave();
                    var content = tinyMCE.activeEditor.getContent();
                    $('#Product_Description').valid();
                });
            },

            toolbar1: 'undo redo | insert | styleselect | bold italic underline | forecolor backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent',
        });
    });
</script>